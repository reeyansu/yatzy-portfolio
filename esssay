Open Source Development and Its Relevance to Me

Introduction
Open source development has become a driving force in modern software engineering, transforming how we build and use technology. At its heart, open source refers to software whose source code is available for anyone to view, modify, and distribute freely. This approach encourages collaboration, transparency, and innovation, allowing developers like us from all over the world to contribute and improve projects together. Unlike proprietary software, which is controlled by private companies, open source thrives on community involvement, peer feedback, and rapid iteration. As a computing student, engaging with open source is not just useful,  it’s essential for staying up-to-date with current industry practices.
 In this essay, I’ll reflect on the concept of open source, share my experiences with an open-source-inspired project, and discuss how this has shaped my learning and influenced my future career path.

What Is Open Source Development?
Open source development is about more than just sharing code , it’s a way of working together, being open, and always improving. In traditional software models, companies own the code, and users can only use it without seeing how it works inside. Open source has changed this by letting developers share their code with everyone, under licenses like MIT or GPL. This means others can learn from it, change it, and even use it in their own projects, whether for personal use or commercial purposes.
For open source projects to run smoothly, tools like Git and platforms like GitHub are crucial. Git helps developers keep track of changes, manage different versions, and work together without issues. On the other hand, GitHub makes it even easier by allowing contributors to submit updates through pull requests, track bugs, and automate tasks.
Famous open source projects like Linux, Python, and Mozilla Firefox have had a huge impact on technology and industries around the world, all while being free and driven by the community. The success of these projects shows how open source can do more than just create software, it actually helps people learn, grow, and innovate together.

My Experience With Open Source Tools and Practices
As part of the Open Source Development module at IBA, I completed a portfolio project designed to simulate real-world open source workflows. The main task was to create a simplified version of the Yatzy game in Python, integrate automated testing using GitHub Actions, and manage issues collaboratively through GitHub. This practical project gave me first-hand experience with tools and practices used in real open source environments.
I began by setting up a GitHub repository and using Git to manage my version control. I practiced essential commands such as clone, checkout, add, commit, push, and pull. I also created branches like test-branch to safely experiment without affecting the main codebase. I also learned the importance of clear commit messages and how Git history can serve as useful documentation.
The core of this project was writing a Yatzy class in Python. This class rolled five dice, allowed individual dice to be locked, and included scoring methods such as ones(), twos(), up to sixes(), as well as more advanced scoring logic like chance(). To ensure code quality, I wrote unit tests using Python’s unit test module. This helped me understand how automated testing supports reliability and prevents regressions in open source projects.
One of the most eye-opening parts for me from the project was setting up GitHub Actions. I created a workflow file that automatically ran my unit tests every time I pushed code. This automation mimicked what professional open source projects use to ensure every contribution meets quality standards. Watching my tests run automatically in the Actions tab gave me a strong sense of real-world practice and confidence.
To simulate collaboration, I also created and resolved a GitHub issue myself. I opened an issue suggesting the addition of a chance() method, implemented the method on a new branch, pushed the changes, and opened a pull request. I then merged the pull request after confirming all tests passed. This workflow gave me insight into how contributors work together to improve open source projects and how pull requests are used to manage changes safely.
As part of my coursework for Open Source Development, I collaborated with a classmate who submitted a GitHub issue to my repository. The issue (#3) requested that I implement the three_of_a_kind() method in the Yatzy class, which should return the sum of three matching dice, or 0 if no match is found. To complete this task, I created a new branch named fix/three-of-a-kind. I then wrote the required method in yatzy.py, and added a corresponding test in test_yatzy.py to ensure the logic worked as expected. After confirming all tests passed locally, I committed and pushed the code.
Next, I opened a pull request referencing the issue, and after reviewing it, I successfully merged the pull request into the main branch. This experience gave me hands-on insight into how collaborative workflows are managed using GitHub issues, branches, and pull requests. It was a realistic simulation of how contributions and bug fixes are handled in real open source projects.
Through these tasks, I developed a deeper appreciation for the structure and discipline that open source projects require not just in coding, but in communication, documentation, and review.
Relevance to My Career and the Software Industry
The experience I gained from this module goes far beyond academic learning. Open source development is increasingly seen as a core competency in the software industry. Employers often review candidates’ GitHub profiles to assess coding style, collaboration history, and technical skills. By building and maintaining a public project like my Yatzy game, I now have something tangible to showcase to future employers.
Moreover, open source tools are used everywhere like in startups, big tech companies, and everything in between. Learning how to use Git, GitHub, and CI/CD (continuous integration and deployment) through GitHub Actions has given me practical skills that apply to nearly any development role. The habits of writing testable code, documenting changes, and collaborating through issues and pull requests are not only important in open source but they are essential in any modern development team.
Open source has also taught me about giving back to the community. I now understand how small contributions like fixing a bug, updating documentation, or reporting an issue can have a real impact. It’s empowering to know that anyone, regardless of experience level, can contribute to meaningful projects and be part of something bigger.
Looking ahead, I hope to contribute to open source projects in areas I’m passionate about, such as web development, machine learning, or tools for education. By doing so, I can continue to learn, grow my network, and make a positive difference in the tech world.

Conclusion
Working on the Yatzy game and managing it with open source tools has been a defining part of my learning this term. Through this project, I didn’t just learn how to write Python code but I also  learned how to manage  my code collaboratively, ensure quality through automated testing, and participate in open source-style workflows. These skills are directly relevant to the expectations of real-world developers and are already shaping how I think about software engineering as a career.
Open source development is more than just writing public code, it’s a mindset of collaboration, openness, and continuous improvement. It prepares developers to work transparently, solve problems with others, and share knowledge freely. For me, this project wasn’t just an assignment but it was more like a first step into a larger world of open source, and I look forward to contributing more in the future.
